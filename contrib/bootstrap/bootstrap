#!/usr/bin/env bash

set -euo pipefail

function abort_if_exists() {
    [ -e "${1}" ] || return 0
    echo "${1}: already exists" >&2
    exit 1
}

function fetch_script() {
    local http_status="$(curl -IL "${1}" | head -n1 | tr -d '\r')"
    if ! echo "${http_status}" | grep -q '^HTTP/[1-9][0-9.]* 200[^0-9]*'
    then
        echo "${http_status}: unexpected HTTP status" >&2
        return 1
    fi
    curl -L "${SCRIPT_URL}"
}

REPO="${REPO:-https://github.com/t13a/depot}"
BRANCH="${BRANCH:-master}"
SCRIPT_URL="${SCRIPT_URL:-https://raw.githubusercontent.com/t13a/depot/master/depot}"
SCRIPT="$(fetch_script "${SCRIPT_URL}")"
CLONE_DIR=".depot/vendor/$(echo "${SCRIPT}" | python - path hostpath "${REPO}")"
CHECKOUT_DIR="vendor/$(echo "${SCRIPT}" | python - path hostpath "${REPO}")"

abort_if_exists "${CLONE_DIR}"
abort_if_exists "${CHECKOUT_DIR}"
abort_if_exists .depot.yaml
abort_if_exists .gitignore

mkdir -p "${CLONE_DIR}" "${CHECKOUT_DIR}"

git clone --no-checkout "${REPO}" "${CLONE_DIR}"

git --git-dir="${CLONE_DIR}/.git" --work-tree="${CHECKOUT_DIR}" checkout "${BRANCH}"

cat << EOF > .depot.yaml
api: v1alpha1
dir: vendor
env:
  DEPOT_GIT_CLONE_DIR_PREFIX: ../.depot/vendor/
  DEPOT_GIT_PATH_FORMAT: hostpath
sync:
- git:
    repo: ${REPO}
    branch: ${BRANCH}
EOF

cat << EOF > .gitignore
.depot
EOF

cat << EOF

The bootstrap was successful. To update the latest version, execute the following command.

$ cd $(pwd)
$ ${CHECKOUT_DIR}/depot run .depot.yaml
EOF
